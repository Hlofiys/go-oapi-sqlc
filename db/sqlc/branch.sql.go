// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: branch.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBranch = `-- name: CreateBranch :one
INSERT INTO "Branches"(
    "Name",
    "MaxUsers"
) VALUES (
             $1, $2
         ) RETURNING "Id", "Name", "MaxUsers", "CurrentUsers", "GroupIds"
`

type CreateBranchParams struct {
	Name     string `json:"Name"`
	MaxUsers int32  `json:"MaxUsers"`
}

func (q *Queries) CreateBranch(ctx context.Context, arg CreateBranchParams) (Branch, error) {
	row := q.db.QueryRow(ctx, createBranch, arg.Name, arg.MaxUsers)
	var i Branch
	err := row.Scan(
		&i.Id,
		&i.Name,
		&i.MaxUsers,
		&i.CurrentUsers,
		&i.GroupIds,
	)
	return i, err
}

const deleteBranch = `-- name: DeleteBranch :exec
DELETE FROM "Branches"
WHERE "Id" = $1
`

func (q *Queries) DeleteBranch(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteBranch, id)
	return err
}

const deleteBranches = `-- name: DeleteBranches :exec
DELETE FROM "Branches"
WHERE "Id" = ANY($1::int[])
`

func (q *Queries) DeleteBranches(ctx context.Context, dollar_1 []int32) error {
	_, err := q.db.Exec(ctx, deleteBranches, dollar_1)
	return err
}

const getBranchById = `-- name: GetBranchById :one
SELECT "Id", "Name", "MaxUsers", "CurrentUsers", "GroupIds" FROM "Branches"
WHERE "Id" = $1 LIMIT 1
`

func (q *Queries) GetBranchById(ctx context.Context, id int32) (Branch, error) {
	row := q.db.QueryRow(ctx, getBranchById, id)
	var i Branch
	err := row.Scan(
		&i.Id,
		&i.Name,
		&i.MaxUsers,
		&i.CurrentUsers,
		&i.GroupIds,
	)
	return i, err
}

const listBranches = `-- name: ListBranches :many
SELECT "Id", "Name", "MaxUsers", "CurrentUsers", "GroupIds" FROM "Branches"
ORDER BY "Id"
LIMIT $1
    OFFSET $2
`

type ListBranchesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBranches(ctx context.Context, arg ListBranchesParams) ([]Branch, error) {
	rows, err := q.db.Query(ctx, listBranches, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Branch{}
	for rows.Next() {
		var i Branch
		if err := rows.Scan(
			&i.Id,
			&i.Name,
			&i.MaxUsers,
			&i.CurrentUsers,
			&i.GroupIds,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBranch = `-- name: UpdateBranch :one
UPDATE "Branches"
SET
    "Name" = coalesce($1, "Name"),
    "MaxUsers" = coalesce($2, "MaxUsers")
WHERE "Id" = $3
RETURNING "Id", "Name", "MaxUsers", "CurrentUsers", "GroupIds"
`

type UpdateBranchParams struct {
	Name     pgtype.Text `json:"name"`
	MaxUsers pgtype.Int4 `json:"maxUsers"`
	BranchID int32       `json:"branch_id"`
}

func (q *Queries) UpdateBranch(ctx context.Context, arg UpdateBranchParams) (Branch, error) {
	row := q.db.QueryRow(ctx, updateBranch, arg.Name, arg.MaxUsers, arg.BranchID)
	var i Branch
	err := row.Scan(
		&i.Id,
		&i.Name,
		&i.MaxUsers,
		&i.CurrentUsers,
		&i.GroupIds,
	)
	return i, err
}
